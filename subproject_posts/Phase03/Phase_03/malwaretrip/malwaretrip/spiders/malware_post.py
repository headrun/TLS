import scrapy
import MySQLdb
from scrapy import Selector
from scrapy.http import Request
#from urlparse import urlparse
from urlparse import urljoin
from scrapy.xlib.pydispatch import dispatcher
from scrapy import signals
import re
import datetime
from malwaretrip.spiders import utils
#from scrapy.spider import Spider
import time
import hashlib
from malwaretrip.items import MalwaretripItem
from elasticsearch import Elasticsearch

POST_QUERY = utils.generate_upsert_query_posts_crawl('malware')
class MalwarePost(scrapy.Spider):
    name = "malware_post"
    def __init__(self):
        self.conn = MySQLdb.connect(db='malwaretrip',host='127.0.0.1',use_unicode = 'True', charset = 'utf8mb4')
        self.cursor = self.conn.cursor()
        self.es = Elasticsearch('http://127.0.0.1:9222')
        dispatcher.connect(self.close_conn, signals.spider_closed)

    def close_conn(self, spider):
        self.conn.commit()
        self.conn.close()

    def start_requests(self):
        self.start_urls = self.cursor.execute("select post_url from malware where crawl_status = 0")
        post_url = self.cursor.fetchall()
        for url in post_url:
            yield Request(url[0],callback=self.parse_meta_data)

    def parse_meta_data(self,response):
        sel= Selector(response)
        category = response.xpath('//ul[@class="p-breadcrumbs "]//span[@itemprop="name"]/text()')[1].extract()
        sub_category = str(sel.xpath('//ul[@class="p-breadcrumbs "]//span[@itemprop="name"]/text()').extract()[1:])
        thread_title =  ''.join( response.xpath('//h1[@class="p-title-value"]/text()').extract())
        thread_url = response.url
        post_title = ' '
        nodes = response.xpath('//div[@class="message-inner"]')
        if nodes:
            query = 'update malware set crawl_status = 1 where post_url = %(url)s'
            val = {'url':response.request.url}
            self.cursor.execute(query,val)
            self.conn.commit()

        for node in nodes:
            post_url = ''.join(node.xpath('.//ul[@class="message-attribution-opposite message-attribution-opposite--list"]/li/a/@href').extract())
            post_url =  'https://malwaretips.com' + post_url
            post_id = post_url.split("-")[-1]
            publish_time=  ''.join(node.xpath('.//div[@class="message-attribution-main"]//time[@class="u-dt"]/text()').extract())
            try:
                publish = datetime.datetime.strptime(publish_time,'%b %d, %Y, %I:%M %p ')
                publish_epoch = time.mktime(publish.timetuple())*1000
            except:
                try:
                    publish = datetime.datetime.strptime(publish_time,'%b %d, %Y')
                    publish_epoch = time.mktime(publish.timetuple())*1000
                except:
                    pass
            fetch_epoch = utils.fetch_time()
            author = ''.join(node.xpath('.//div[@class="uix_messagePostBitWrapper"]//div//h4//text()').extract())
            author_url = ' '.join(node.xpath('.//h4[@class="message-name"]//a[@class="username "]//@href').extract())
            author_url = 'https://malwaretips.com' + author_url
            post_text = ''.join(node.xpath('.//div[@class="bbWrapper"]//text() |.//img[@class="smilie"]//@alt | .//blockquote[@class="bbCodeBlock bbCodeBlock--expandable bbCodeBlock--quote"]/@class | .//blockquote[@class="bbCodeBlock bbCodeBlock--expandable bbCodeBlock--quote"]/text() |.//div[@class="bbCodeBlock bbCodeBlock--screenLimited bbCodeBlock--code"]/@class ').extract()).replace('bbCodeBlock bbCodeBlock--expandable bbCodeBlock--quote','Quote').replace('bbCodeBlock bbCodeBlock--screenLimited bbCodeBlock--code','Quote')
            post_text = utils.clean_text(post_text)
            all_link_ = node.xpath('.//div[@class="bbMediaWrapper-inner"]//iframe//@src | .//div[@class="attachment-icon attachment-icon--img"]/a//@href | .//div[@class="attachment-name"]/a//@href | .//div[@class="attachment-icon attachment-icon--img"]/a//@src | .//img[@class="bbImage"]//@src | .//a[@class="link link--external"]//@href | .//a[@class="link link--internal"]//@href | .//div[@class="bbCodeBlock-expandContent"]//a/@href | .//a[@class="bbCodeBlock-sourceJump"]//@href').extract()
            all_links = []
            for all_link in all_link_:
                all_links.append(urljoin("https://malwaretips.com",all_link))

            doc = {
                    'domain':'malwaretips.com',
                    'category':category,
                    'sub_category': sub_category,
                    'thread_title':thread_title,
                    'thread_url': thread_url,
                    'post_title':post_title,
                    'post_url':post_url,
                    'post_id':post_id,
                    'author': author,
                    'author_url': author_url,
                    'publish_time': long(publish_epoch),
                    
                    'text':post_text,
                    'links':str(all_links),
                    'fetch_time':long(utils.fetch_time()),
                    #'reference_url':response.url
                  }
            obj = MalwaretripItem()
            obj['doc'] = doc
            yield obj


